/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Space)

package parser;
import recovery.*;
import javax.swing.JTextArea;

public class Space
{
  public static void main(String args []) throws ParseException
  {
    Space parser = new Space(System.in);
    while (true)
    {
      System.out.println("Lendo a entrada");
      System.out.println("Informe um programa:");
      try
      {

//        Space.inicio();
//        switch (Space.inicio())
//        {
//          case 0 : 
//          System.out.println("OK.");
//          break;
//          case 1 : 
//          System.out.println("Goodbye.");
//          break;
//          default : 
//          break;
//        }

		SimpleNode node = Space.inicio();
		node.dump(null, " -- > ");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Space.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }


  static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static Token lastError = null;
  static boolean eof;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado
	
  // o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  // de sincroniza\u00e7\u00e3o

  public static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met, JTextArea textArea) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincronização: " + g);
	if(textArea != null) { 
		textArea.append(
		  "\n*** " + met + " ***"
		 +"\nConjunto de sincronização: " + g
		+ "\nConjunto de sincronização: " + g);
		
	}
	
	if (g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o
	
	tok = getToken(1); // pega token corrente
	while ( ! eof )	{ // se n\u00e3o chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincronização: " + 
	                       im(tok.kind));
	    if(textArea != null) {
			textArea.append("     \nEncontrado token de sincronização -- > " + im(tok.kind));
	    }
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  if(textArea != null) {
		textArea.append("     \nIgnorando o token -- > " + im(tok.kind));
	  }
	  getNextToken();     // pega pr\u00f3ximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde não deveria.");
  }
  
}

PARSER_END(Space)

SKIP :
{
  " "
| "\r"
| "\t"
}

TOKEN : /* OPERADORES ARITMETICOS*/
{
  < MAIS 			: "+" >
| < MENOS 			: "-" >
| < VEZES 			: "*" >
| < DIVIDE 			: "/" >
}

TOKEN : /* OPERADORES RELACIONAIS*/
{
  < MAIOR 			: " >"	>
| < MENOR 			: "< "	>
| < MAIOR_IGUAL 	: " >=" >
| < MENOR_IGUAL 	: "< =" >
| < IGUAL_IGUAL 	: "=="	>
| < DIFERENTE		: "!="	>
}

TOKEN : /* OPERADORES DE ATRIBUICAO*/
{
  < IGUAL		:	"="	 >
| < MAIS_IGUAL	:	"+=" >
| < MENOS_IGUAL :   "-=" >
| < IN			:	"in" >
}

TOKEN : /* OPERADORES LOGICOS*/
{
  	< AND		: "and"		>
|   < OR 		: "or"		>
|   < NOT 		: "not"		>
}

TOKEN : /* OPERADORES DE DELIMITACAO*/
{
  
  < INICIO_FIM_BLOCO	 	: ":"	>
| < VIRGULA					: "," 	>
| < PONTO_VIRGULA			: ";" 	>
| < INICIA_VARIAVEL 		: "__"	>
| < ABRE_PARENTESES			: "("	>
| < FECHA_PARENTESES		: ")"	>
| < PULA_LINHA				: "\n"  >
| < DELIMITA_ESTRELA		: "'"	>
}

TOKEN : /* PALAVRAS RESERVADAS*/
{
  < BIG_BANG		:	"big_bang"		>
| < TIPO_LUA		:	"lua" 			>
| < TIPO_QUASAR  	:	"quasar" 		>
| < TIPO_ESTRELA 	:	"estrela"		>
| < BURACO_BRANCO	:	"buraco_branco" >
| < BURACO_NEGRO	:	"buraco_negro"	>
| < ORBITA			:	"orbita"		>
| < TRANSLACAO		:	"translacao"	>
| < ANA_BRANCA		:	"ana_branca"	>
| < ANA_MARROM 		:	"ana_marrom"	>
| < ESPACO			:	"espaco"		>
| < LAMBDA			:	"lambda"		>
| < TIPO_VACUO		:	"vacuo"			>
| < GALAXIA			:	"galaxia"		>
| < SUPER_NOVA		:	"$"				>
| < RETORNO			:	"retorno"		>
| < LUA_CHEIA		:	"lua_cheia"		>
| < LUA_NOVA		:	"lua_nova"		>
| < BREAK			:	"break"			>
}

TOKEN : /* IDENTIFICADOR */
{
  < ID 	:	 < LETRA >(< LETRA> | < DIGITO>)* >
}

TOKEN :  /* TERMINAIS COMPLEXOS */
{
  < NUMERO 	: (< DIGITO >)+ 		>
| < DIGITO 	: [ "0"-"9" ] 			>
| < LETRA	: ["A"-"Z"] | ["a"-"z"] >
}

/* NÃO TERMINAIS */

SimpleNode inicio() :
{/*RecoverySet inicioSinc = Follow.inicio;*/}
{
//  	try { 
   		(tipoRetorno() galaxia() identificador() abreParenteses() fechaParenteses() inicioFimBloco() pulaLinha() (bloco())* retorno() valorPrimitivo() inicioFimBloco() pulaLinha()
|		lambda() inicioFimBloco() pulaLinha() (constantes())* inicioFimBloco() pulaLinha())*
		bigBang() inicioFimBloco() pulaLinha() (bloco())* inicioFimBloco() pulaLinha()
//	}catch(ParseException e) {
//		consumeUntil(inicioSinc, e, "Erro em -- > inicio()");
//	}
{ return jjtThis; } 
}

void tipoRetorno():
{RecoverySet tipoRetornoSinc = Follow.tipoRetorno;}
{
  try { 
  	tipoVacuo() | tipoQuasar() | tipoLua() | tipoEstrela()
	}catch(ParseException e) {
		consumeUntil(tipoRetornoSinc, e, "Erro em - > tipoRetorno()", null);
	}
}

void constantes():
{RecoverySet constantesSinc = Follow.constantes;}
{
	try {
		declaracaoDeVariaveis() igual() (numero() | gerarEstrela() ) pulaLinha()
	}catch(ParseException e) {
		consumeUntil(constantesSinc, e, "Erro em - > constantes()", null);
	}
}

void bloco() :
{RecoverySet blocoSinc = Follow.bloco;}
{
  	try {
		(declaracaoDeVariaveis()  | comandos())* pulaLinha()
	}catch(ParseException e) {
		consumeUntil(blocoSinc, e, "Erro em - > bloco()", null);
	}				
}

void declaracaoDeVariaveis() :
{RecoverySet declaracaoVarSinc = Follow.declaracaoDeVariavel;}
{
	try { 
		iniciaVariavel() tipoDeVariavel() identificador() (modoDaVariavel())*
	}catch(ParseException e) {
		consumeUntil(declaracaoVarSinc, e, "Erro em - > declaracaoDeVariaveis()", null);
	}
}

void comandos() :
{RecoverySet comandosSinc = Follow.comandos;}
{
  	try { 
	  	(atribuicao())
| 		(anaBranca() abreParenteses() condicao() decideFinal())(inicioFimBloco() (bloco())* (ativaBreak())* decideAnaMarrom())
|		(orbita() abreParenteses() identificador() in() espaco() configuraEspaco()fechaParenteses())(inicioFimBloco() (bloco())*  (ativaBreak())* inicioFimBloco())
| 		(translacao() abreParenteses() condicao()decideFinal())(inicioFimBloco() (bloco())* (ativaBreak())*  inicioFimBloco())
| 		(buracoNegro()abreParenteses()iniciaVariavel()tipoDeVariavel()virgula()expressao()fechaParenteses())
|		(buracoBranco()abreParenteses()expressao()fechaParenteses())
	}catch(ParseException e) {
		consumeUntil(comandosSinc, e, "Erro em - > comandos()", null);
	}
}
void atribuicao():
{RecoverySet atribSinc = Follow.atribuicao;}
{
  	try { 
  		identificador() tipoAtribuicao() (valorPrimitivo()(modoDeAtribuicao())*)
	}catch(ParseException e) {
		consumeUntil(atribSinc, e, "Erro em - > atribuicao()", null);
	}
}

void tipoAtribuicao():
{RecoverySet tipoAtribSinc = Follow.tipoAtribuicao;}
{
  	try {
  		igual() | maisIgual() | menosIgual()
	}catch(ParseException e) {
		consumeUntil(tipoAtribSinc, e, "Erro em - > tipoAtribuicao()", null);
	}
}

void modoDeAtribuicao():
{RecoverySet modoAtribSinc = Follow.modoDeAtribuicao;}
{
  	try { 
  		operacaoAritmetica() valorPrimitivo()
	}catch(ParseException e) {
		consumeUntil(modoAtribSinc, e, "Erro em - > modoDeAtribuicao()", null);
	}  
}

void valorPrimitivo():
{RecoverySet valorPrimSinc = Follow.valorPrimitivo;}
{
  	try { 
  		numero() | gerarEstrela() | identificador() | luaCheia() | luaNova() | tipoVacuo()
	}catch(ParseException e) {
		consumeUntil(valorPrimSinc, e, "Erro em - > valorPrimitivo()", null);
	}
}

void operacaoAritmetica():
{RecoverySet opSinc = Follow.operacaoAritmetica;}
{
  	try { 
 		( mais() | menos() | vezes() | divide() | abreParenteses() | fechaParenteses() )
	}catch(ParseException e) {
		consumeUntil(opSinc, e, "Erro em - > operacaoAritmetica()", null);
	}
}

void decideAnaMarrom():
{RecoverySet decAnaMarromSinc = Follow.decideAnaMarrom;}
{
  	try { 
  		inicioFimBloco() (anaMarrom() inicioFimBloco()(bloco())* inicioFimBloco())*
	}catch(ParseException e) {
		consumeUntil(decAnaMarromSinc, e, "Erro em - > decideAnaMarrom()", null);
	}
}

void condicao():
{RecoverySet condicaoSinc = Follow.condicao;}
{
	try { 
 	 	expressao()(maior() | menor() | maiorIgual() | menorIgual() | in())+expressao()
	}catch(ParseException e) {
		consumeUntil(condicaoSinc, e, "Erro em - > condicao()", null);
	}
}

void expressao() :
{RecoverySet expressaoSinc = Follow.expressao;}
{
  	try { 
 	 	identificador() | numero() | gerarEstrela()	| luaCheia() | luaNova()
	}catch(ParseException e) {
		consumeUntil(expressaoSinc, e, "Erro em - > expressao()", null);
	}
}

void decideFinal() :
{RecoverySet decideFinalSinc = Follow.decideFinal;}
{
  	try { 
  		(and() condicao()| or() condicao())*fechaParenteses()
	}catch(ParseException e) {
		consumeUntil(decideFinalSinc, e, "Erro em - > decideFinal()", null);
	}
}

void configuraEspaco():
{RecoverySet configuraEspacoSinc = Follow.configuraEspaco;}
{
	try { 
		abreParenteses()numero()virgula()numero()fechaParenteses()  
	}catch(ParseException e) {
		consumeUntil(configuraEspacoSinc, e, "Erro em - > configuraEspaco()", null);
	}
}

void gerarEstrela():
{RecoverySet gerarEstrelaSinc = Follow.gerarEstrela;}
{
  	try { 
  		delimitaEstrela()(numero() | identificador())*delimitaEstrela()
	}catch(ParseException e) {
		consumeUntil(gerarEstrelaSinc, e, "Erro em - > gerarEstrela()", null);
	}
}

void tipoDeVariavel() :
{RecoverySet tipoVarSinc = Follow.tipoVariavel;}
{
  	try { 
  		tipoQuasar() | tipoEstrela() | tipoLua()
	}catch(ParseException e) {
		consumeUntil(tipoVarSinc, e, "Erro em - > tipoDeVariavel()", null);
	}
}

void modoDaVariavel() :
{RecoverySet modoVarSinc = Follow.modoVariavel;}
{
  	try { 
  		virgula() identificador()
	}catch(ParseException e) {
		consumeUntil(modoVarSinc, e, "Erro em - > modoDaVariavel()", null);
	}
}

/* TERMINAIS */

void tipoVacuo():
{}
{
  < TIPO_VACUO>
}

void tipoQuasar():
{}
{
  < TIPO_QUASAR>
}

void tipoLua():
{}
{
  < TIPO_LUA>
}

void tipoEstrela():
{}
{
  < TIPO_ESTRELA>
}

void galaxia():
{}
{
	< GALAXIA>
}

void identificador():
{}
{
	< ID>
}

void abreParenteses():
{}
{

	< ABRE_PARENTESES>

}

void fechaParenteses():
{}
{
	< FECHA_PARENTESES>
}

void inicioFimBloco():
{}
{

	< INICIO_FIM_BLOCO>

}

void pulaLinha():
{}
{
	< PULA_LINHA>
}

void retorno():
{}
{
	< RETORNO>
}

void lambda():
{}
{
  < LAMBDA>
}

void bigBang():
{}
{
  < BIG_BANG>
}

void igual():
{}
{
  < IGUAL>
}

void numero():
{}
{
  < NUMERO>
}

void iniciaVariavel():
{}
{
  < INICIA_VARIAVEL>
}

void anaBranca():
{}
{
  < ANA_BRANCA>
}

void orbita():
{}
{
  < ORBITA>
}


void in():
{}
{
  < IN>
}

void espaco():
{}
{
  < ESPACO>
}


void translacao():
{}
{
  < TRANSLACAO>
}

void buracoNegro():
{}
{
  < BURACO_NEGRO>
}

void virgula():
{}
{
  < VIRGULA>
}

void buracoBranco():
{}
{
  < BURACO_BRANCO>
}

void maisIgual():
{}
{
  < MAIS_IGUAL>
}

void menosIgual():
{}
{
  < MENOS_IGUAL>
}

void menos():
{}
{
  < MENOS>
}

void mais():
{}
{
  < MAIS>
}

void vezes():
{}
{
  	< VEZES>
}

void divide():
{}
{
  < DIVIDE>
}

void maior():
{}
{
  < MAIOR>
}

void menor():
{}
{
  < MENOR>
}

void maiorIgual():
{}
{
  < MAIOR_IGUAL>
}

void menorIgual():
{}
{
  < MENOR_IGUAL>
}

void and():
{}
{
  < AND>
}

void or():
{}
{
  < OR>
}

void not():
{}
{
  < NOT>
}

void delimitaEstrela():
{}
{
  < DELIMITA_ESTRELA>
}

void anaMarrom():
{}
{
  < ANA_MARROM>
}

void letra():
{}
{
  < LETRA>
}

void luaCheia():
{}
{
  < LUA_CHEIA>
}

void luaNova():
{}
{
  < LUA_NOVA>
}

void ativaBreak():
{}

{
  	< BREAK> pulaLinha()

}