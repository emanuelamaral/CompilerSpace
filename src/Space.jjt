/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Space)

public class Space
{
  public static void main(String args []) throws ParseException
  {
    Space parser = new Space(System.in);
    while (true)
    {
      System.out.println("Lendo a entrada");
      System.out.println("Informe um programa:");
      try
      {

//        Space.inicio();
//        switch (Space.inicio())
//        {
//          case 0 : 
//          System.out.println("OK.");
//          break;
//          case 1 : 
//          System.out.println("Goodbye.");
//          break;
//          default : 
//          break;
//        }

		SimpleNode node = Space.inicio();
		node.dump(" -- > ");
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Space.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Space)

SKIP :
{
  " "
| "\r"
| "\t"
}

TOKEN : /* OPERADORES ARITMETICOS*/
{
  < MAIS 			: "+" >
| < MENOS 			: "-" >
| < VEZES 			: "*" >
| < DIVIDE 			: "/" >
}

TOKEN : /* OPERADORES RELACIONAIS*/
{
  < MAIOR 			: " >"	>
| < MENOR 			: "< "	>
| < MAIOR_IGUAL 	: " >=" >
| < MENOR_IGUAL 	: "< =" >
| < IGUAL_IGUAL 	: "=="	>
| < DIFERENTE		: "!="	>
}

TOKEN : /* OPERADORES DE ATRIBUICAO*/
{
  < IGUAL		:	"="	 >
| < MAIS_IGUAL	:	"+=" >
| < MENOS_IGUAL :   "-=" >
| < IN			:	"in" >
}

TOKEN : /* OPERADORES LOGICOS*/
{
  	< AND		: "and"		>
|   < OR 		: "or"		>
|   < NOT 		: "not"		>
}

TOKEN : /* OPERADORES DE DELIMITACAO*/
{
  
  < INICIO_FIM_BLOCO	 	: ":"	>
| < VIRGULA					: "," 	>
| < PONTO_VIRGULA			: ";" 	>
| < INICIA_VARIAVEL 		: "__"	>
| < ABRE_PARENTESES			: "("	>
| < FECHA_PARENTESES		: ")"	>
//| < TABULACAO				: "\t" 	>
| < PULA_LINHA				: "\n"  >
| < DELIMITA_ESTRELA		: "'"	>
}

TOKEN : /* PALAVRAS RESERVADAS*/
{
  < BIG_BANG		:	"big_bang"		>
| < TIPO_LUA		:	"lua" 			>
| < TIPO_QUASAR  	:	"quasar" 		>
| < TIPO_ESTRELA 	:	"estrela"		>
| < BURACO_BRANCO	:	"buraco_branco" >
| < BURACO_NEGRO	:	"buraco_negro"	>
| < ORBITA			:	"orbita"		>
| < TRANSLACAO		:	"translacao"	>
| < ANA_BRANCA		:	"ana_branca"	>
| < ANA_MARROM 		:	"ana_marrom"	>
| < ESPACO			:	"espaco"		>
| < LAMBDA			:	"lambda"		>
| < TIPO_VACUO		:	"vacuo"			>
| < GALAXIA			:	"galaxia"		>
| < SUPER_NOVA		:	"$"				>
| < RETORNO			:	"retorno"		>
}

TOKEN : /* IDENTIFICADOR */
{
  < ID 	:	 < LETRA >(< LETRA> | < DIGITO>)* >
}

TOKEN :  /* TERMINAIS COMPLEXOS */
{
  < NUMERO 	: (< DIGITO >)+ 		>
| < DIGITO 	: [ "0"-"9" ] 			>
| < LETRA	: ["A"-"Z"] | ["a"-"z"] >
}

/* N√ÉO TERMINAIS */

SimpleNode inicio() :
{}
{
   (tipoRetorno() galaxia() identificador() abreParenteses() fechaParenteses() inicioFimBloco() pulaLinha() (bloco())* retorno() valorPrimitivo() inicioFimBloco() pulaLinha()
|	lambda() inicioFimBloco() pulaLinha() (constantes())* inicioFimBloco() pulaLinha())*
	bigBang() inicioFimBloco() pulaLinha() (bloco())* inicioFimBloco() pulaLinha()
{ return jjtThis; } 
}

void tipoRetorno():
{}
{
  tipoVacuo() | tipoQuasar() | tipoLua() | tipoEstrela()
}

void constantes():
{}
{
	declaracaoDeVariaveis() igual() (numero() | gerarEstrela() ) pulaLinha()
}

void bloco() :
{}
{
	(declaracaoDeVariaveis()  | comandos())* pulaLinha()
    				
}

void declaracaoDeVariaveis() :
{}
{
	 iniciaVariavel() tipoDeVariavel() identificador() (modoDaVariavel())*
}

void comandos() :
{}
{
  (atribuicao())
| (anaBranca() abreParenteses() condicao() decideFinal())(inicioFimBloco() (bloco())* decideAnaMarrom())
| (orbita() abreParenteses() identificador() in() espaco() configuraEspaco()fechaParenteses())(inicioFimBloco() (bloco())* inicioFimBloco())
| (translacao() abreParenteses() condicao()decideFinal())(inicioFimBloco() (bloco())* inicioFimBloco())
| (buracoNegro()abreParenteses()iniciaVariavel()tipoDeVariavel()virgula()expressao()fechaParenteses())
| (buracoBranco()abreParenteses()expressao()fechaParenteses())
}
void atribuicao():
{}
{
  identificador() tipoAtribuicao() (valorPrimitivo()(modoDeAtribuicao())*)
}

void tipoAtribuicao():
{}
{
  igual() | maisIgual() | menosIgual()
}

void modoDeAtribuicao():
{}
{
  operacaoAritmetica() valorPrimitivo()
}

void valorPrimitivo():
{}
{
  numero() | gerarEstrela() | identificador()
}

void operacaoAritmetica():
{}
{
 ( mais() | menos() | vezes() | divide() | abreParenteses() | fechaParenteses() )
}

void decideAnaMarrom():
{}
{
  inicioFimBloco() (pulaLinha()bloco() | anaMarrom() inicioFimBloco()(bloco())* inicioFimBloco())
}

void condicao():
{}
{
  expressao()(maior() | menor() | maiorIgual() | menorIgual() | in())+expressao()
}

void expressao() :
{}
{
  identificador() | numero() | gerarEstrela()
}

void decideFinal() :
{}
{
  (and() condicao()| or() condicao())*fechaParenteses()
}

void configuraEspaco():
{}
{
	abreParenteses()numero()virgula()numero()fechaParenteses()  
}

void gerarEstrela():
{}
{
  delimitaEstrela()(numero() | identificador())*delimitaEstrela()
}

void tipoDeVariavel() :
{}
{
  tipoQuasar() | tipoEstrela() | tipoLua()
}

void valorAtribuicao() :
{}
{
  numero() | letra() | luaCheia() | luaNova() | identificador() 
}

void modoDaVariavel() :
{}
{
  virgula() identificador()
}

/* TERMINAIS */

void tipoVacuo():
{}
{
  < TIPO_VACUO>
}

void tipoQuasar():
{}
{
  < TIPO_QUASAR>
}

void tipoLua():
{}
{
  < TIPO_LUA>
}

void tipoEstrela():
{}
{
  < TIPO_ESTRELA>
}

void galaxia():
{}
{
  < GALAXIA>
}

void identificador():
{}
{
  < ID>
}

void abreParenteses():
{}
{
  < ABRE_PARENTESES>
}

void fechaParenteses():
{}
{
  < FECHA_PARENTESES>
}

void inicioFimBloco():
{}
{
  < INICIO_FIM_BLOCO>
}

void pulaLinha():
{}
{
  < PULA_LINHA>
}

void retorno():
{}
{
  < RETORNO>
}

void lambda():
{}
{
  < LAMBDA>
}

void bigBang():
{}
{
  < BIG_BANG>
}

void igual():
{}
{
  < IGUAL>
}

void numero():
{}
{
  < NUMERO>
}

void iniciaVariavel():
{}
{
  < INICIA_VARIAVEL>
}

void anaBranca():
{}
{
  < ANA_BRANCA>
}

void orbita():
{}
{
  < ORBITA>
}


void in():
{}
{
  < IN>
}

void espaco():
{}
{
  < ESPACO>
}


void translacao():
{}
{
  < TRANSLACAO>
}

void buracoNegro():
{}
{
  < BURACO_NEGRO>
}

void virgula():
{}
{
  < VIRGULA>
}

void buracoBranco():
{}
{
  < BURACO_BRANCO>
}

void maisIgual():
{}
{
  < MAIS_IGUAL>
}

void menosIgual():
{}
{
  < MENOS_IGUAL>
}

void menos():
{}
{
  < MENOS>
}

void mais():
{}
{
  < MAIS>
}

void vezes():
{}
{
  	< VEZES>
}

void divide():
{}
{
  < DIVIDE>
}

void maior():
{}
{
  < MAIOR>
}

void menor():
{}
{
  < MENOR>
}

void maiorIgual():
{}
{
  < MAIOR_IGUAL>
}

void menorIgual():
{}
{
  < MENOR_IGUAL>
}

void and():
{}
{
  < AND>
}

void or():
{}
{
  < OR>
}

void not():
{}
{
  < NOT>
}

void delimitaEstrela():
{}
{
  < DELIMITA_ESTRELA>
}

void anaMarrom():
{}
{
  < ANA_MARROM>
}

void letra():
{}
{
  < LETRA>
}

void luaCheia():
{}
{
  "lua_cheia"
}

void luaNova():
{}
{
  "lua_nova"
}

